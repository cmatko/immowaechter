#!/usr/bin/env node

/**
 * üîê AUTH TEST: Login Redirect funktioniert
 * 
 * Testet:
 * 1. Nicht eingeloggte User werden zu Login weitergeleitet
 * 2. Dashboard zeigt Auth Check
 * 3. Keine Supabase Errors
 */

import { chromium } from 'playwright';

const BASE_URL = 'http://localhost:3000';

console.log('üîê AUTH TEST: Login Redirect funktioniert');
console.log('=' .repeat(50));

async function authTest() {
  let browser;
  let page;
  
  try {
    console.log('1Ô∏è‚É£ Browser starten...');
    browser = await chromium.launch({ 
      headless: false, // Sichtbar f√ºr Debugging
      slowMo: 1000
    });
    
    page = await browser.newPage();
    
    // Console Logs sammeln
    const consoleLogs = [];
    page.on('console', msg => {
      consoleLogs.push(msg.text());
      console.log(`üì± Console: ${msg.text()}`);
    });
    
    // Page Errors sammeln
    page.on('pageerror', error => {
      console.log(`‚ùå Page Error: ${error.message}`);
    });
    
    console.log('2Ô∏è‚É£ Dashboard ohne Login √∂ffnen...');
    await page.goto(`${BASE_URL}/dashboard`, { waitUntil: 'networkidle' });
    
    console.log('3Ô∏è‚É£ Warte 3 Sekunden auf Auth Check...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('4Ô∏è‚É£ URL pr√ºfen...');
    const currentUrl = page.url();
    console.log(`üìä Aktuelle URL: ${currentUrl}`);
    
    if (currentUrl.includes('/login')) {
      console.log('‚úÖ User wurde zu Login weitergeleitet!');
    } else if (currentUrl.includes('/dashboard')) {
      console.log('‚ö†Ô∏è  User ist noch auf Dashboard - Auth Check funktioniert nicht');
    } else {
      console.log(`‚ö†Ô∏è  Unerwartete URL: ${currentUrl}`);
    }
    
    console.log('5Ô∏è‚É£ Console Logs analysieren...');
    const authLogs = consoleLogs.filter(log => 
      log.includes('Session') || 
      log.includes('Auth') ||
      log.includes('Login') ||
      log.includes('Redirect')
    );
    
    if (authLogs.length > 0) {
      console.log('‚úÖ Auth Console Logs gefunden:');
      authLogs.forEach(log => console.log(`   üì± ${log}`));
    } else {
      console.log('‚ö†Ô∏è  Keine Auth Console Logs gefunden');
    }
    
    console.log('6Ô∏è‚É£ Error Logs pr√ºfen...');
    const errorLogs = consoleLogs.filter(log => 
      log.includes('Error') || 
      log.includes('supabaseKey') ||
      log.includes('required')
    );
    
    if (errorLogs.length > 0) {
      console.log('‚ùå Error Logs gefunden:');
      errorLogs.forEach(log => console.log(`   ‚ùå ${log}`));
    } else {
      console.log('‚úÖ Keine Error Logs gefunden');
    }
    
    console.log('\nüéØ AUTH TEST ZUSAMMENFASSUNG:');
    console.log('=' .repeat(50));
    
    if (currentUrl.includes('/login')) {
      console.log('‚úÖ Auth Check funktioniert - User wird zu Login weitergeleitet');
    } else {
      console.log('‚ùå Auth Check funktioniert nicht - User bleibt auf Dashboard');
    }
    
    if (errorLogs.length === 0) {
      console.log('‚úÖ Keine Supabase Errors');
    } else {
      console.log('‚ùå Supabase Errors gefunden');
    }
    
    if (authLogs.length > 0) {
      console.log('‚úÖ Auth Console Logs funktionieren');
    } else {
      console.log('‚ö†Ô∏è  Keine Auth Console Logs');
    }
    
    console.log('=' .repeat(50));
    
    return currentUrl.includes('/login') && errorLogs.length === 0;
    
  } catch (error) {
    console.error('‚ùå AUTH TEST FEHLER:', error.message);
    return false;
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// Test ausf√ºhren
authTest()
  .then((success) => {
    if (success) {
      console.log('\n‚úÖ AUTH TEST ERFOLGREICH!');
      console.log('‚úÖ User wird korrekt zu Login weitergeleitet');
      console.log('‚úÖ Keine Supabase Errors');
      process.exit(0);
    } else {
      console.log('\n‚ùå AUTH TEST FEHLGESCHLAGEN!');
      console.log('‚ùå Auth Check funktioniert nicht korrekt');
      process.exit(1);
    }
  })
  .catch((error) => {
    console.error('\n‚ùå TEST FEHLER:', error.message);
    process.exit(1);
  });




