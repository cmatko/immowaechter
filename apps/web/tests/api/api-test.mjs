#!/usr/bin/env node

/**
 * üî• API TEST
 * 
 * Testet:
 * 1. Critical Maintenances API direkt aufrufen
 * 2. Pr√ºft ob API 200 statt 401 zur√ºckgibt
 */

const BASE_URL = 'http://localhost:3000';

console.log('üî• API TEST');
console.log('=' .repeat(50));

async function apiTest() {
  try {
    console.log('1Ô∏è‚É£ Critical Maintenances API testen...');
    
    const response = await fetch(`${BASE_URL}/api/dashboard/critical-maintenances`);
    const status = response.status;
    const data = await response.json();
    
    console.log(`üìä API Status: ${status}`);
    console.log(`üìä API Response:`, JSON.stringify(data, null, 2));
    
    if (status === 200) {
      console.log('‚úÖ API gibt 200 zur√ºck');
    } else if (status === 401) {
      console.log('‚ùå API gibt 401 zur√ºck - Auth Problem');
    } else {
      console.log(`‚ö†Ô∏è  API gibt ${status} zur√ºck`);
    }
    
    if (data.success && Array.isArray(data.data)) {
      console.log(`‚úÖ API gibt ${data.data.length} kritische Wartungen zur√ºck`);
    } else {
      console.log('‚ö†Ô∏è  API Response Format unerwartet');
    }
    
    console.log('\nüéØ API TEST ZUSAMMENFASSUNG:');
    console.log('=' .repeat(50));
    
    if (status === 200) {
      console.log('‚úÖ API funktioniert korrekt');
      console.log(`‚úÖ ${data.data?.length || 0} kritische Wartungen gefunden`);
    } else {
      console.log('‚ùå API funktioniert nicht korrekt');
    }
    
    console.log('=' .repeat(50));
    
    return status === 200;
    
  } catch (error) {
    console.error('‚ùå API TEST FEHLER:', error.message);
    return false;
  }
}

// Test ausf√ºhren
apiTest()
  .then((success) => {
    if (success) {
      console.log('\n‚úÖ API TEST ERFOLGREICH!');
      console.log('‚úÖ API funktioniert ohne Auth Errors');
      process.exit(0);
    } else {
      console.log('\n‚ùå API TEST FEHLGESCHLAGEN!');
      console.log('‚ùå API gibt nicht 200 zur√ºck');
      process.exit(1);
    }
  })
  .catch((error) => {
    console.error('\n‚ùå TEST FEHLER:', error.message);
    process.exit(1);
  });




