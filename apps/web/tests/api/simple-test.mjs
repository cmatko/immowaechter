#!/usr/bin/env node

/**
 * üéØ EINFACHER TEST: Pages laden ohne Auth Check
 * 
 * Testet:
 * 1. Server l√§uft
 * 2. Pages laden ohne Redirect zu Login
 * 3. Keine 404 Errors
 */

import { chromium } from 'playwright';

const BASE_URL = 'http://localhost:3000';

console.log('üéØ EINFACHER TEST: Pages laden ohne Auth Check');
console.log('=' .repeat(50));

async function simpleTest() {
  let browser;
  let page;
  
  try {
    console.log('1Ô∏è‚É£ Browser starten...');
    browser = await chromium.launch({ 
      headless: true,
      slowMo: 0
    });
    
    page = await browser.newPage();
    
    console.log('2Ô∏è‚É£ Server Status pr√ºfen...');
    const response = await page.goto(BASE_URL, { 
      waitUntil: 'networkidle',
      timeout: 10000 
    });
    
    if (!response || response.status() !== 200) {
      throw new Error(`Server nicht erreichbar: ${response?.status()}`);
    }
    
    console.log('‚úÖ Server l√§uft auf Port 3000');
    
    console.log('3Ô∏è‚É£ Dashboard Page testen...');
    await page.goto(`${BASE_URL}/dashboard`, { waitUntil: 'networkidle' });
    
    // Pr√ºfe ob URL sich ge√§ndert hat (Redirect zu Login)
    const currentUrl = page.url();
    if (currentUrl.includes('/login')) {
      throw new Error('‚ùå Dashboard redirectet zu Login - Auth Check noch aktiv!');
    }
    
    console.log('‚úÖ Dashboard l√§dt ohne Redirect');
    
    console.log('4Ô∏è‚É£ Critical Maintenances Page testen...');
    await page.goto(`${BASE_URL}/dashboard/critical-maintenances`, { waitUntil: 'networkidle' });
    
    // Pr√ºfe ob URL sich ge√§ndert hat
    const criticalUrl = page.url();
    if (criticalUrl.includes('/login')) {
      throw new Error('‚ùå Critical Maintenances redirectet zu Login - Auth Check noch aktiv!');
    }
    
    console.log('‚úÖ Critical Maintenances l√§dt ohne Redirect');
    
    console.log('5Ô∏è‚É£ Page Content pr√ºfen...');
    
    // Warte kurz auf Content Loading
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Pr√ºfe ob irgendein Content geladen ist (nicht nur Loading Screen)
    const hasContent = await page.evaluate(() => {
      const body = document.body;
      const text = body.innerText;
      
      // Pr√ºfe ob es mehr als nur "L√§dt..." ist
      return text.length > 100 && !text.includes('L√§dt...');
    });
    
    if (!hasContent) {
      throw new Error('‚ùå Page zeigt nur Loading Screen - Content nicht geladen!');
    }
    
    console.log('‚úÖ Page Content geladen');
    
    console.log('\nüéâ EINFACHER TEST ERFOLGREICH!');
    console.log('=' .repeat(50));
    console.log('‚úÖ Server l√§uft auf Port 3000');
    console.log('‚úÖ Dashboard Pages laden ohne Redirect');
    console.log('‚úÖ Keine Auth Check Redirects');
    console.log('‚úÖ Page Content wird geladen');
    console.log('=' .repeat(50));
    
    return true;
    
  } catch (error) {
    console.error('‚ùå EINFACHER TEST FEHLGESCHLAGEN:', error.message);
    return false;
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// Test ausf√ºhren
simpleTest()
  .then((success) => {
    if (success) {
      console.log('\n‚úÖ EINFACHER TEST ERFOLGREICH!');
      process.exit(0);
    } else {
      console.log('\n‚ùå EINFACHER TEST FEHLGESCHLAGEN!');
      process.exit(1);
    }
  })
  .catch((error) => {
    console.error('\n‚ùå TEST FEHLER:', error.message);
    process.exit(1);
  });




